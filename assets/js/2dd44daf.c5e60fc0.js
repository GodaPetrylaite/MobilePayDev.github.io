"use strict";(self.webpackChunkmobile_pay_merchant_payments_documentation=self.webpackChunkmobile_pay_merchant_payments_documentation||[]).push([[7947],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>p});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),l=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(a),g=r,p=u["".concat(o,".").concat(g)]||u[g]||m[g]||i;return a?n.createElement(p,s(s({ref:t},d),{},{components:a})):n.createElement(p,s({ref:t},d))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=g;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[u]="string"==typeof e?e:r,s[1]=c;for(var l=2;l<i;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},57276:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const i={sidebar_position:1},s="Recurring Payments",c={unversionedId:"online/features/recurring",id:"online/features/recurring",title:"Recurring Payments",description:"By using the MobilePay Online Recurring API, merchants can initiate a payment agreement for MobilePay users.",source:"@site/docs/online/features/recurring.md",sourceDirName:"online/features",slug:"/online/features/recurring",permalink:"/docs/online/features/recurring",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Features",permalink:"/docs/online/features/"},next:{title:"Checkout",permalink:"/docs/online/features/checkout"}},o={},l=[{value:"End user experience",id:"end-user-experience",level:2},{value:"Create agreement",id:"create-agreement",level:3},{value:"Completing a recurring payment (Merchant initiated transaction)",id:"completing-a-recurring-payment-merchant-initiated-transaction",level:3},{value:"Manage recurring payment agreements",id:"manage-recurring-payment-agreements",level:3},{value:"Sequence diagrams",id:"sequence-diagrams",level:2},{value:"Account verification",id:"account-verification",level:2},{value:"Card Update",id:"card-update",level:2},{value:"Avoiding card mismatch",id:"avoiding-card-mismatch",level:3},{value:"Soft decline / 3DS",id:"soft-decline--3ds",level:3},{value:"Failed MIT transaction",id:"failed-mit-transaction",level:2},{value:"Retrying a MIT",id:"retrying-a-mit",level:3},{value:"Soft decline / 3DS on MITs",id:"soft-decline--3ds-on-mits",level:3},{value:"Capture/cancel/refund",id:"capturecancelrefund",level:2},{value:"Sequence diagrams overview",id:"sequence-diagrams-overview",level:2},{value:"Create and activate recurring agreement",id:"create-and-activate-recurring-agreement",level:3},{value:"Create MIT payment",id:"create-mit-payment",level:3},{value:"Merchant/PSP terminates agreement",id:"merchantpsp-terminates-agreement",level:3},{value:"User terminates recurring agreement via MobilePay",id:"user-terminates-recurring-agreement-via-mobilepay",level:3},{value:"User terminates recurring agreement via SelfServiceUrl",id:"user-terminates-recurring-agreement-via-selfserviceurl",level:3},{value:"User updates the card of a recurring agreement",id:"user-updates-the-card-of-a-recurring-agreement",level:3}],d={toc:l},u="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"recurring-payments"},"Recurring Payments"),(0,r.kt)("p",null,"By using the MobilePay Online Recurring API, merchants can initiate a payment agreement for MobilePay users.\nThe payment agreement, if accepted by the user, enables the merchant (through their PSP) to automatically charge the user for future payments without the need for user interaction every time. Both scheduled and unscheduled recurring payments are possible."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"A recurring payment agreement is always created alongside a Customer Initiated Transaction (CIT). I.e. the customer is present and actively requesting the initial transaction and the agreement.\nThe subsequent recurring payments are Merchant Initiated Transactions (MIT) where the customer is not present. Recurring agreements are not to be used for one-off payments where the customer is present (only exception being the initial transaction).  ")),(0,r.kt)("h2",{id:"end-user-experience"},"End user experience"),(0,r.kt)("h3",{id:"create-agreement"},"Create agreement"),(0,r.kt)("p",null,"A user accepts a commercial agreement for a subscription in a web shop and opts to checkout with MobilePay.\nIn the MobilePay app, the user accepts that the merchant can carry out recurring payments (in accordance with the commercial agreement between the user and merchant) through MobilePay.  "),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(57902).Z},(0,r.kt)("img",{alt:"Create agreement",src:a(13145).Z,width:"3623",height:"1724"}))),(0,r.kt)("h3",{id:"completing-a-recurring-payment-merchant-initiated-transaction"},"Completing a recurring payment (Merchant initiated transaction)"),(0,r.kt)("p",null,"After the user has accepted recurring payments in MobilePay, the merchant/PSP can carry out recurring transactions in accordance with their agreement with the user.\nWhen a transaction is captured, the user will receive a notification on their phone."),(0,r.kt)("img",{src:a(47573).Z,alt:"MIT",width:"725"}),(0,r.kt)("h3",{id:"manage-recurring-payment-agreements"},"Manage recurring payment agreements"),(0,r.kt)("p",null,"The user can access details of the recurring payment agreement in MobilePay such as a list of payment authorizations and other info about the agreement.\nIn addition, the user can change the card on the agreement or terminate the agreement. These actions will result in a callback to the PSP."),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(11661).Z},(0,r.kt)("img",{alt:"Manage agreement",src:a(77675).Z,width:"3046",height:"2051"}))),(0,r.kt)("h2",{id:"sequence-diagrams"},"Sequence diagrams"),(0,r.kt)("p",null,"In the bottom of this page you will find ",(0,r.kt)("a",{parentName:"p",href:"#sequence-diagrams-overview"},"diagrams")," describing how the solution works including which endpoints are involved.\nAll described flows must be supported by the PSP."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A recurring agreement must be requested using our new recurring API, but the authorization of the transaction is still done using our existing API.\nPlease observe details on the endpoints to be used in the sequence diagrams below.")),(0,r.kt)("h2",{id:"account-verification"},"Account verification"),(0,r.kt)("p",null,"When creating a new recurring payment agreement, the integrator must set an amount for the initial transaction.\nIf an upfront amount is due to be payed immediately upon acceptance of the agreement, the integrator simply sets this amount.\nHowever, if there is no upfront amount, the integrator must mark isAccountVerification and provide an amount between 0,00 and 1,00 units of the selected currency.\nMarking a transaction as an account verification influences how the transaction is presented to the end user."),(0,r.kt)("h2",{id:"card-update"},"Card Update"),(0,r.kt)("p",null,"At any point after a payment agreement has been created, the end user can change the payment card connected to the agreement.\nWhen this happens, the new card will be sent to the integrator for account verification.\nThe integrator must support this functionality and must use updateCardCallbackUrl when requesting a new agreement to specify how they want to receive these card updates."),(0,r.kt)("h3",{id:"avoiding-card-mismatch"},"Avoiding card mismatch"),(0,r.kt)("p",null,"To initiate a MIT payment, the integrator must supply the last 4 PAN digits of the card they are trying to charge.\nThis is to ensure that integrator and MobilePay data are still in sync, so any MIT's are only performed using the card expected to be used by the end user.\nIf the card is tokenized, we always supply the last 4 digits of the PAN along with our token callbacks as part of the maskedCardNumber value."),(0,r.kt)("p",null,"If a card mismatch is detected, we will immediately ask the end user to perform a card update on the agreement. The merchant should also communicate about this to the end user.\nThe integrator should try again only after receiving a successful card update callback on UpdateCardCallbackUrl."),(0,r.kt)("p",null,"Example of push notification on card mismatch:"),(0,r.kt)("img",{src:a(91372).Z,alt:"Push card mismatch",width:"375"}),(0,r.kt)("h3",{id:"soft-decline--3ds"},"Soft decline / 3DS"),(0,r.kt)("p",null,"A card update might be soft declined by the issuer so the integrator must support our 3DS flow for card updates similar to how 3DS is handled for regular MobilePay Online payments."),(0,r.kt)("h2",{id:"failed-mit-transaction"},"Failed MIT transaction"),(0,r.kt)("p",null,"If a MIT transactions fails at PSP/Acquirer/Issuer, the integrator should provide us with the appropiate error and reason code (see below).\nWe will immediately send a push notfication to the end user about the failed transaction:"),(0,r.kt)("img",{src:a(31786).Z,alt:"Push failed MIT",width:"375"}),(0,r.kt)("p",null,"Note that we are not always able to identify whether the user has carried out any actions to resolve the issue. E.g. we will not be informed if the user unblocks their card or adds funds to their bank account etc.\nHowever, a subsequent card update callback can be considered a valid cue to retry the MIT - the card update could be the user replacing an expired card or using another card that is not blocked etc.\nWe allow the integrator to retry a MIT again at any time but it is up to the integrator/merchant to define appropriate retry policies and determine acceptable grace periods etc.\nFailed MITs should also trigger communication directly from the merchant to the user to increase the chance of resolving the matter."),(0,r.kt)("h3",{id:"retrying-a-mit"},"Retrying a MIT"),(0,r.kt)("p",null,"When retrying a MIT, use the UpdateMITPaymentRequest endpoint to provide the outcome of the retry. Do not create a new MIT for every retry attempt."),(0,r.kt)("h3",{id:"soft-decline--3ds-on-mits"},"Soft decline / 3DS on MITs"),(0,r.kt)("p",null,"We do not expect MITs to be soft declined but if it happens, the integrator should consider the transaction as failed. We do not support 3DS challenges for MITs."),(0,r.kt)("h2",{id:"capturecancelrefund"},"Capture/cancel/refund"),(0,r.kt)("p",null,"Integrators must provide information about capture/cancel/refund events for transactions performed on a recurring payment agreement - the same as for regular MobilePay Online transactions.\nWe do not currently reflect all of these events towards the end user, but they are used for billing purposes and incident handling."),(0,r.kt)("h2",{id:"sequence-diagrams-overview"},"Sequence diagrams overview"),(0,r.kt)("p",null,"The following diagrams describe how the solution works including which endpoints are involved."),(0,r.kt)("h3",{id:"create-and-activate-recurring-agreement"},"Create and activate recurring agreement"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(25202).Z},(0,r.kt)("img",{alt:"Create agreement",src:a(55152).Z,width:"1565",height:"1364"}))),(0,r.kt)("h3",{id:"create-mit-payment"},"Create MIT payment"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(7456).Z},(0,r.kt)("img",{alt:"Create MIT payment",src:a(13164).Z,width:"1235",height:"643"}))),(0,r.kt)("h3",{id:"merchantpsp-terminates-agreement"},"Merchant/PSP terminates agreement"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(60662).Z},(0,r.kt)("img",{alt:"Terminate agreement merchant",src:a(12175).Z,width:"827",height:"365"}))),(0,r.kt)("h3",{id:"user-terminates-recurring-agreement-via-mobilepay"},"User terminates recurring agreement via MobilePay"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(88529).Z},(0,r.kt)("img",{alt:"Terminate agreement user",src:a(7183).Z,width:"1271",height:"429"}))),(0,r.kt)("h3",{id:"user-terminates-recurring-agreement-via-selfserviceurl"},"User terminates recurring agreement via SelfServiceUrl"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(73729).Z},(0,r.kt)("img",{alt:"Delete agreement merchant",src:a(34156).Z,width:"1310",height:"586"}))),(0,r.kt)("h3",{id:"user-updates-the-card-of-a-recurring-agreement"},"User updates the card of a recurring agreement"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(38914).Z},(0,r.kt)("img",{alt:"Update card",src:a(26929).Z,width:"1121",height:"506"}))))}m.isMDXComponent=!0},7456:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/online_rec-CreateMITPayment-665a5825b723a5ff1027034fff2458e3.png"},25202:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/online_rec-CreateRecurringAgreement-1949313a3f60db58ac7a5e94fbf25163.png"},73729:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/online_rec-DeleteRecurringAgreementMerchant-c25f506019ea0a9afcf490bf7a1e91fc.png"},88529:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/online_rec-TerminateRecurringAgreement-User-67819986c9b91fa5be2f151f6d6b9ec7.png"},60662:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/online_rec-TerminateRecurringAgreementMerchant-dd42984e2ae407e6d27a31743c8b05bc.png"},38914:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/online_rec-UpdateAgreementCard-ddd671d30eddaf75d049684e053f89b2.png"},11661:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/online_rec-app_flows-manage-agreement-912cda7b934233d71e5a96babf11bc49.jpg"},57902:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/online_rec-create_agreement-ad31e3da192ede8733dbd1c8dd340d96.jpg"},47573:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-app_flows-MIT-3be62e1cb951e28220e5b2b12cf10ac7.jpg"},91372:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-push-card-mismatch-0479ba3973107d70fcf963bf85a63a5c.png"},31786:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-push-failed-MIT-fed679c7d0f1a15b1c8a1c051bb0ff16.png"},13164:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-CreateMITPayment-665a5825b723a5ff1027034fff2458e3.png"},55152:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-CreateRecurringAgreement-1949313a3f60db58ac7a5e94fbf25163.png"},34156:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-DeleteRecurringAgreementMerchant-c25f506019ea0a9afcf490bf7a1e91fc.png"},7183:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-TerminateRecurringAgreement-User-67819986c9b91fa5be2f151f6d6b9ec7.png"},12175:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-TerminateRecurringAgreementMerchant-dd42984e2ae407e6d27a31743c8b05bc.png"},26929:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-UpdateAgreementCard-ddd671d30eddaf75d049684e053f89b2.png"},77675:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-app_flows-manage-agreement-912cda7b934233d71e5a96babf11bc49.jpg"},13145:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/online_rec-create_agreement-ad31e3da192ede8733dbd1c8dd340d96.jpg"}}]);